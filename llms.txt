# Tamga - Modern Python Logging Utility

## Overview

Tamga is a high-performance Python logging library with colorful console output, multiple output formats, and async capabilities. Named after an ancient Turkic symbol used for marking ownership and identity.

**Author**: Doğukan Ürker
**License**: MIT
**Repository**: https://github.com/DogukanUrker/Tamga

Key features:
- Buffered writing system (10x faster than traditional logging)
- Beautiful console output with Tailwind CSS colors
- Multiple outputs: console, file, JSON, SQLite, MongoDB, API, email
- Automatic file rotation with backups
- Thread-safe with async MongoDB support
- Structured logging with key-value data

## Installation

```bash
pip install tamga              # Basic installation
pip install tamga[api]         # With API logging support
pip install tamga[mongo]       # With MongoDB integration
pip install tamga[full]        # All features
```

## Quick Start

```python
from tamga import Tamga

# Create logger with default settings
logger = Tamga()

# Log messages
logger.info("Application started")
logger.warning("Memory usage at 85%")
logger.error("Failed to connect to API")
logger.success("User registered successfully")
logger.debug("Cache initialized with 1000 entries")
logger.critical("Database connection lost")
```

## Configuration Parameters

### Display Settings

```python
logger = Tamga(
    # Console output
    isColored=True,        # Enable colored output (default: True)
    logToConsole=True,     # Enable console logging (default: True)

    # Timestamp components
    showDay=True,          # Show date (default: True)
    showTime=True,         # Show time (default: True)
    showTimezone=False,    # Show timezone (default: False)
)
```

### Output Destinations

```python
logger = Tamga(
    # File outputs
    logToFile=False,       # Enable file logging (default: False)
    logFile="tamga.log",   # Log file path (default: "tamga.log")

    logToJSON=False,       # Enable JSON logging (default: False)
    logJSON="tamga.json",  # JSON file path (default: "tamga.json")

    logToSQL=False,        # Enable SQLite logging (default: False)
    logSQL="tamga.db",     # SQLite file path (default: "tamga.db")
    sqlTable="logs",       # Table name (default: "logs")

    # External services
    logToMongo=False,      # Enable MongoDB (default: False)
    logToAPI=False,        # Enable API logging (default: False)
    sendMail=False,        # Enable email notifications (default: False)
)
```

### Performance Settings

```python
logger = Tamga(
    # Buffer configuration
    bufferSize=50,         # Logs to buffer before writing (default: 50)

    # File rotation (in MB)
    maxLogSize=10,         # Max log file size (default: 10)
    maxJsonSize=10,        # Max JSON file size (default: 10)
    maxSqlSize=50,         # Max SQLite size (default: 50)
    enableBackup=True,     # Create backups on rotation (default: True)
)
```

### MongoDB Configuration

```python
logger = Tamga(
    logToMongo=True,
    mongoURI="mongodb+srv://user:pass@cluster.mongodb.net",
    mongoDatabaseName="tamga",      # Default: "tamga"
    mongoCollectionName="logs",     # Default: "logs"
)
```

### Email Configuration

```python
logger = Tamga(
    sendMail=True,
    smtpServer="smtp.gmail.com",
    smtpPort=587,
    smtpMail="alerts@company.com",
    smtpPassword="app_password",
    smtpReceivers=["admin@company.com", "oncall@company.com"],
    mailLevels=["MAIL"],  # Which log levels trigger emails (default: ["MAIL"])
)
```

### API Configuration

```python
logger = Tamga(
    logToAPI=True,
    apiURL="https://api.company.com/logs",
)
```

## Logging Methods

### Standard Levels

```python
logger.info("Informational message")        # Sky blue
logger.warning("Warning message")           # Amber
logger.error("Error occurred")              # Rose
logger.success("Operation completed")       # Emerald
logger.debug("Debug information")           # Indigo
logger.critical("Critical failure")         # Red
logger.database("Query executed")           # Green
logger.mail("Important notification")       # Neutral - triggers email if configured
logger.metric("Response time: 125ms")       # Cyan
logger.trace("Detailed trace info")         # Gray
```

**Note on `mail()`**: This level triggers email notifications when `sendMail=True` and "MAIL" is in `mailLevels`. Use it for any important events you want email alerts for:
```python
logger.mail("New premium subscription purchased!")
logger.mail("Disk space critically low: 95%")
logger.mail("Important user action: account deleted")
```

### Custom Logging

```python
# Custom level and color
logger.custom("Deploy completed", "DEPLOY", "purple")

# Structured logging with key-value data
logger.dir("User action",
    user_id="123",
    action="login",
    ip_address="192.168.1.1",
    success=True
)
```

### Buffer Control

```python
# Force write all buffered logs
logger.flush()
```

## Output Formats

### Console
```
[28.06.25 | 14:30:45 | UTC]  INFO     Application started
[28.06.25 | 14:30:46 | UTC]  ERROR    Connection failed
```

### File (tamga.log)
```
[28.06.25 | 14:30:45 | UTC] INFO: Application started
[28.06.25 | 14:30:46 | UTC] ERROR: Connection failed
```

### JSON
```json
{
    "level": "INFO",
    "message": "Application started",
    "date": "28.06.25",
    "time": "14:30:45",
    "timezone": "UTC",
    "timestamp": 1719584445.123456
}
```

### SQLite Schema
```sql
CREATE TABLE logs (
    level TEXT,
    message TEXT,
    date TEXT,
    time TEXT,
    timezone TEXT,
    timestamp REAL
)
```

## Common Usage Patterns

### Production Configuration

```python
import os

logger = Tamga(
    # File logging with rotation
    logToFile=True,
    logFile="logs/app.log",
    maxLogSize=50,
    enableBackup=True,

    # JSON for log aggregation
    logToJSON=True,

    # Performance optimization
    logToConsole=False,
    bufferSize=200,

    # Centralized logging
    logToMongo=True,
    mongoURI=os.getenv("MONGO_URI"),

    # Email alerts for critical events
    sendMail=True,
    smtpServer=os.getenv("SMTP_SERVER"),
    smtpPort=587,
    smtpMail=os.getenv("ALERT_EMAIL"),
    smtpPassword=os.getenv("SMTP_PASSWORD"),
    smtpReceivers=["ops@company.com"],
    mailLevels=["CRITICAL", "ERROR", "MAIL"],
)
```

### High-Performance Logging

```python
logger = Tamga(
    logToFile=True,
    logToConsole=False,    # Disable console for speed
    bufferSize=1000,       # Large buffer
)

# Process large dataset
for i, record in enumerate(large_dataset):
    logger.info(f"Processing record {record.id}")

    # Periodic flush to prevent memory buildup
    if i % 10000 == 0:
        logger.flush()
```

### Development Configuration

```python
logger = Tamga(
    # Maximum visibility
    isColored=True,
    showDay=True,
    showTime=True,
    showTimezone=True,

    # Immediate feedback
    bufferSize=1,

    # Local file for debugging
    logToFile=True,
    logFile="debug.log",
)
```

### Structured Request Logging

```python
import time
import uuid

def log_request(request):
    request_id = str(uuid.uuid4())
    start_time = time.time()

    # Log request details
    logger.dir("Request started",
        request_id=request_id,
        method=request.method,
        path=request.path,
        ip=request.remote_addr
    )

    try:
        response = process(request)
        duration = time.time() - start_time

        logger.dir("Request completed",
            request_id=request_id,
            status=response.status_code,
            duration_ms=round(duration * 1000)
        )

        return response

    except Exception as e:
        logger.error(f"Request {request_id} failed: {str(e)}")
        raise
```

### Multi-Service Logging

```python
service_name = os.getenv("SERVICE_NAME", "unknown")

logger = Tamga(
    # Service-specific collection
    logToMongo=True,
    mongoCollectionName=service_name,

    # Include service context
    logToFile=True,
    logFile=f"logs/{service_name}.log",
)

# Add service context to all logs
def log_with_context(message, level="info"):
    logger.dir(message,
        service=service_name,
        version=os.getenv("VERSION"),
        instance=os.getenv("INSTANCE_ID")
    )
```

## Performance Guidelines

### Buffer Size Recommendations

- **Real-time monitoring**: `bufferSize=1` (immediate writes)
- **Web applications**: `bufferSize=50` (default, balanced)
- **Background jobs**: `bufferSize=200-500` (efficient batching)
- **Data processing**: `bufferSize=1000+` (maximum performance)

### Performance Tips

1. **Disable console output in production** for 10x speed improvement
2. **Use flush() after critical messages** to ensure immediate write
3. **Increase buffer size** for batch operations
4. **Use MongoDB/API logging asynchronously** to avoid blocking

### Approximate Throughput

- Console (colored): ~1,000 logs/second
- File (buffered): ~100,000 logs/second
- JSON (buffered): ~80,000 logs/second
- SQLite: ~50,000 logs/second
- MongoDB (async): ~30,000 logs/second

## File Rotation

When a file reaches `maxLogSize`:

1. If `enableBackup=True`, creates timestamped backup:
   - `tamga.log` → `tamga.log.20250628_143022.bak`

2. Clears the original file:
   - Log files: Emptied
   - JSON files: Reset to `[]`
   - SQLite: Records deleted, schema preserved

## Email Notifications

Emails are sent asynchronously with HTML formatting. Configure which levels trigger emails:

```python
logger = Tamga(
    sendMail=True,
    # ... smtp configuration ...
    mailLevels=["CRITICAL", "ERROR", "MAIL"],  # These levels send emails
)

# These trigger emails:
logger.critical("System down")
logger.error("Payment failed")
logger.mail("New customer signed up!")  # Using mail() for important events

# This doesn't trigger email:
logger.warning("High memory usage")  # WARNING not in mailLevels
```

## Available Colors

Custom logging supports all Tailwind CSS colors:
- Grays: slate, gray, zinc, neutral, stone
- Colors: red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose

```python
logger.custom("Custom event", "EVENT", "purple")
logger.custom("Alert", "ALERT", "orange")
```

## Thread Safety

Tamga is thread-safe with locked buffer operations:

```python
import threading

logger = Tamga(logToFile=True)

def worker(worker_id):
    for i in range(100):
        logger.info(f"Worker {worker_id}: Item {i}")

# Safe to use from multiple threads
threads = [threading.Thread(target=worker, args=(i,)) for i in range(10)]
for t in threads:
    t.start()
for t in threads:
    t.join()
```

## Error Handling

Tamga handles failures gracefully without crashing your application:
- MongoDB connection failures don't affect other outputs
- SMTP failures don't stop logging
- File write errors attempt console fallback

## Best Practices

1. **Use appropriate log levels** - Don't use ERROR for warnings
2. **Flush critical messages** - Ensure important logs are written
3. **Configure for your environment** - Different settings for dev/prod
4. **Use structured logging** - Better for parsing and analysis
5. **Monitor log file sizes** - Enable rotation to prevent disk issues
6. **Set up email alerts** - Get notified of critical events
7. **Optimize buffer size** - Balance performance vs reliability

## Complete Example

```python
from tamga import Tamga
import os

# Production-ready configuration
logger = Tamga(
    # Console only in development
    logToConsole=os.getenv("ENV") != "production",

    # Always log to file
    logToFile=True,
    logFile="logs/app.log",
    maxLogSize=50,

    # JSON for log aggregation
    logToJSON=True,

    # Performance settings
    bufferSize=100 if os.getenv("ENV") == "production" else 10,

    # MongoDB for centralized logging
    logToMongo=bool(os.getenv("MONGO_URI")),
    mongoURI=os.getenv("MONGO_URI"),

    # Email alerts for important events
    sendMail=bool(os.getenv("SMTP_SERVER")),
    smtpServer=os.getenv("SMTP_SERVER"),
    smtpPort=587,
    smtpMail=os.getenv("SMTP_USER"),
    smtpPassword=os.getenv("SMTP_PASS"),
    smtpReceivers=["alerts@company.com"],
    mailLevels=["CRITICAL", "MAIL"],
)

# Application usage
logger.info("Application starting")
logger.dir("Configuration loaded",
    environment=os.getenv("ENV"),
    debug_mode=True
)

try:
    # Application logic
    logger.success("Service initialized")

    # Important business event - triggers email
    logger.mail("New premium subscription: user_123 purchased Pro plan")

except Exception as e:
    logger.critical(f"Fatal error: {str(e)}")
    logger.flush()  # Ensure critical error is written
    raise
finally:
    logger.info("Shutting down")
    logger.flush()
```

## Integration Notes

- **Flask/Django**: Initialize Tamga at app startup, use throughout views
- **AsyncIO**: MongoDB operations are handled asynchronously automatically
- **Celery**: Each worker can have its own logger instance
- **Docker**: Mount volume for log files to persist across containers

## Summary

Tamga provides a modern, fast, and feature-rich logging solution with beautiful console output and extensive integration options. Its buffered architecture and async support make it suitable for everything from simple scripts to high-performance distributed systems.
